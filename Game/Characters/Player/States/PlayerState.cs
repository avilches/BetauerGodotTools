using Veronenger.Game.Tools.Input;using Veronenger.Game.Tools.Platforms;using Veronenger.Game.Tools.Statemachine;using Godot;using Veronenger.Game.Controller;namespace Veronenger.Game.Characters.Player.States {    public abstract class PlayerState : State {        protected readonly PlayerController Player;        public const string COYOTE_JUMP = "coyote.jump";        protected PlayerState(PlayerController player) {            Player = player;        }        public void Debug(bool flag, string message) {            if (flag) {                Debug(message);            }        }        public void Debug(string message) {            GD.Print("#" + Player.GetFrame() + ": " + GetType().Name + " | " + message);        }        protected float XInput => Player.PlayerActions.LateralMotion.Strength;        protected bool IsRight => XInput > 0;        protected bool IsLeft => XInput < 0;        protected float YInput => Player.PlayerActions.VerticalMotion.Strength;        protected PlatformManager PlatformManager => Player.PlatformManager;        protected bool IsUp => YInput < 0;        protected bool IsDown => YInput > 0;        protected ActionState Jump => Player.PlayerActions.Jump;        protected ActionState Attack => Player.PlayerActions.Attack;        protected float Delta => Player.Delta;        protected Vector2 Motion => Player.Motion;        protected PlayerConfig PlayerConfig => Player.PlayerConfig;        protected void GoToRunState() {            // Change to run is immediate            Player.SetNextState(typeof(GroundStateRun));        }        protected void GoToIdleState() {            // Idle is deferred to the next frame            Player.SetNextState(typeof(GroundStateIdle));        }        protected void GoToFallState(bool coyoteJump = false) {            // fall next frame            Player.SetNextState(typeof(AirStateFall));            Player.SetNextConfig(COYOTE_JUMP, coyoteJump);        }        protected void GoToJumpState() {            // Jump is immediate            Player.SetNextState(typeof(AirStateJump), true);        }    }}