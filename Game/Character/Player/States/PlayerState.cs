using Godot;using Tools.Input;using Tools.Statemachine;using Veronenger.Game.Controller.Character;using Veronenger.Game.Managers;namespace Veronenger.Game.Character.Player.States {    public abstract class PlayerState : State {        protected readonly PlayerController Player;        public const string COYOTE_JUMP = "coyote.jump";        protected PlayerState(PlayerController player) {            Player = player;        }        public void Debug(bool flag, string message) {            if (flag) {                Debug(message);            }        }        public void Debug(string message) {            GD.Print($"#{Player.GetFrame()}: {GetType().Name} | {message}");        }        // Input from the player        protected float XInput => Player.PlayerActions.LateralMotion.Strength;        protected float YInput => Player.PlayerActions.VerticalMotion.Strength;        protected ActionState Jump => Player.PlayerActions.Jump;        protected ActionState Attack => Player.PlayerActions.Attack;        protected bool IsRight => XInput > 0;        protected bool IsLeft => XInput < 0;        protected bool IsUp => YInput < 0;        protected bool IsDown => YInput > 0;        protected Vector2 Motion => Player.Motion;        public PlayerConfig PlayerConfig => Player.PlayerConfig;        protected void GoToRunState() {            Player.SetNextState(typeof(GroundStateRun), true);        }        protected void GoToIdleState() {            // Idle is deferred to the next frame            Player.SetNextState(typeof(GroundStateIdle));        }        protected void GoToFallShortState(bool enableCoyoteJump = false) {            // fall next frame            Player.SetNextState(typeof(AirStateFallShort));            Player.SetNextConfig(COYOTE_JUMP, enableCoyoteJump);        }        protected void GoToFallLongState() {            Player.SetNextState(typeof(AirStateFallLong), true);        }        protected void GoToJumpState(bool immediate) {            // Jump is immediate            Player.SetNextState(typeof(AirStateJump), immediate);        }    }}