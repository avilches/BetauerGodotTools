using Godot;using Tools;using Tools.Input;using Tools.Statemachine;using Veronenger.Game.Controller.Character;namespace Veronenger.Game.Character.Player.States {    public abstract class PlayerState : State {        protected readonly Player2DPlatformController Player2DPlatform;        private Logger _loggerJumpHelper;        private Logger _loggerCoyoteJump;        private Logger _loggerJumpVelocity;        public override void ConfigureLogging(StateMachine stateMachine) {            _loggerJumpHelper = LoggerFactory.GetLogger(stateMachine.Name, "JumpHelper");            _loggerCoyoteJump = LoggerFactory.GetLogger(stateMachine.Name, "CoyoteJump");            _loggerJumpVelocity = LoggerFactory.GetLogger(stateMachine.Name, "JumpVelocity");        }        // Input from the player        protected float XInput => Player2DPlatform.PlayerActions.LateralMotion.Strength;        protected float YInput => Player2DPlatform.PlayerActions.VerticalMotion.Strength;        protected ActionState Jump => Player2DPlatform.PlayerActions.Jump;        protected ActionState Attack => Player2DPlatform.PlayerActions.Attack;        protected bool IsRight => XInput > 0;        protected bool IsLeft => XInput < 0;        protected bool IsUp => YInput < 0;        protected bool IsDown => YInput > 0;        protected Vector2 Motion => Player2DPlatform.Motion;        protected PlayerConfig PlayerConfig => Player2DPlatform.PlayerConfig;        protected PlayerState(Player2DPlatformController player2DPlatform) {            Player2DPlatform = player2DPlatform;        }        protected void DebugJumpHelper(string message) => _loggerJumpHelper.Debug(message);        protected void DebugCoyoteJump(string message) => _loggerCoyoteJump.Debug(message);        protected void DebugJump(string message) => _loggerJumpVelocity.Debug(message);    }}