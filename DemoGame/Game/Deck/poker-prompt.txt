# Solitaire Poker Game Implementation Guide

## Core Game Mechanics
- 7-card hands
- 4 rounds per game
- Actions per round: play a hand or discard up to 5 cards
- Maximum 4 discards per game
- Score: sum of card ranks × hand multiplier

## Scoring Multipliers
High Card (×1) -> Pair (×2) -> Two Pair (×3) -> Three of a Kind (×4) -> 
Straight (×5) -> Flush (×6) -> Full House (×7) -> Four of a Kind (×8) -> 
Straight Flush (×9)

Card ranks: Ace=14, King=13, Queen=12, Jack=11, Others=face value

## Class Architecture

### Card and Deck System
Card:
- Properties: Rank (2-14), Suit (S,H,D,C)
- Used for both deck and hand representation
- ToString format: "AS" (Ace of Spades), "KH" (King of Hearts)

Deck:
- Manages 52-card standard deck
- Core operations: Shuffle, Draw, ReturnCards
- Tracks available and played cards

### Hand Evaluation System

PokerHand (abstract):
- Properties: Cards, Name, PokerHands reference
- Core methods:
  * CalculateScore(): Computes hand value
  * FindAll(): Identifies all possible hands of this type
  * FindPossibleImprovements(): Analyzes future possibilities
- Each implementation handles specific hand type logic

Implementations follow hand hierarchy (ordered by multiplier):
HighCardHand -> PairHand -> TwoPairHand -> ThreeOfAKindHand -> 
StraightHand -> FlushHand -> FullHouseHand -> FourOfAKindHand -> 
StraightFlushHand

### Hand Improvement Analysis

HandImprovement:
- Represents a single possible hand improvement
- Properties:
  * CardsToKeep: Cards to retain from current hand
  * CardsToDiscard: Cards to remove
  * TargetHand: Complete poker hand we aim to achieve
  * Probability: Chance of achieving target hand
  * Score: HandScore × Probability

DiscardOption:
- Groups related improvements for same discard action
- Properties:
  * CardsToDiscard: Specific cards to discard
  * PossibleImprovements: All possible improvements from this discard
  * TotalScore: Sum of all improvement scores

### Game State Management

GameState:
- Properties:
  * CurrentHand: Active cards
  * Discards: Used discard actions
  * HandsPlayed: Completed rounds
  * TotalScore: Accumulated points
  * History: Record of all actions

GameHistory:
- Tracks PLAY and DISCARD actions
- Records cards and scores
- Maintains game progression

## Implementation Patterns

### FindPossibleImprovements Pattern
Each PokerHand implementation:
1. Analyzes current hand for potential improvements
2. Identifies needed cards from available pool
3. Calculates probability for each improvement
4. Creates HandImprovement instances with:
   - Cards to keep and discard
   - Target hand configuration
   - Probability and potential score

### Probability Calculations
Varies by hand type:
- Single card: matchingCards/remainingCards
- Multiple cards: Uses combination probability
- Suit requirements: Factors suit restrictions
- Sequential needs: Considers valid ranges

### Core System Rules
1. Each hand type handles its own improvement analysis
2. Probabilities reflect real chances of improvement
3. Scores combine hand value and probability
4. All valid discard combinations are considered
5. Improvements are grouped by discard action

### Analysis Flow
1. Each hand type identifies possible improvements
2. Improvements are grouped by discard action
3. Groups are sorted by total potential score
4. Top 5 discard options are presented
5. Each option shows all possible improvements

## Utility Support
- Combinations(): Generates card combinations
- FindStraights(): Identifies sequential cards
- Card comparison and equality operations
- Probability calculation helpers
- CardListEqualityComparer for comparing card sets

## Key Concepts
- Encapsulated improvement logic per hand type
- Accurate probability calculations
- Clear separation of responsibilities
- Efficient hand analysis and scoring
- Complete tracking through game history

## Testing Strategy
- Use reduced deck for probability verification
- Test each hand type's improvement logic
- Verify probability calculations
- Check all possible improvement paths
- Validate discard combinations
- Ensure accurate scoring