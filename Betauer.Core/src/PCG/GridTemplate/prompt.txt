MazePattern.cs contiene un sistema para cargar y gestionar patrones de celdas para generar laberintos visuales. Las celdas pueden tener conexiones en las cuatro direcciones cardinales (Norte, Este, Sur, Oeste) y el sistema permite definir diferentes variantes visuales para cada configuración de conexiones.

Clases principales:

1. PatternDirection [Enum]
   - Enum [Flags] que representa las 4 direcciones cardinales posibles
   - Mapa de bits (7 bits, pero solo usamos 4 posiciones):
     * Norte = bit 0 (1 << 0 = 1)    // 00000001
     * Este  = bit 2 (1 << 2 = 4)    // 00000100
     * Sur   = bit 4 (1 << 4 = 16)   // 00010000
     * Oeste = bit 6 (1 << 6 = 64)   // 01000000
   - Permite combinaciones usando operadores de bits
     Ejemplos:
     * Norte + Este = 5   (00000101)  // Conexiones al norte y este
     * Norte + Sur  = 17  (00010001)  // Conexiones al norte y sur
     * Todas = 85         (01010101)  // Conexiones en todas las direcciones

2. PatternId
   - Encapsula un ID que representa las conexiones de una celda más sus flags
   - El formato es: "direcciones/flag1/flag2/...", por ejemplo:
     * "N/basic" - conexión Norte con flag "basic"
     * "NE/fancy/stone" - conexiones Norte+Este con flags "fancy" y "stone"
   - Las direcciones pueden especificarse con letras (N, E, S, W) o números
   - Los flags son opcionales y sirven para categorizar variantes
   - Proporciona métodos para comprobar conexiones específicas
   - Incluye un método factory FromNode para crear un type directo desde un nodo del laberinto

3. PatternId
   - Encapsula un ID que representa las conexiones de una celda más sus flags
   - El formato es: "direcciones/flag1/flag2/...", por ejemplo:
     * "N/basic" - conexión Norte con flag "basic"
     * "NE/fancy/stone" - conexiones Norte+Este con flags "fancy" y "stone"
   - Las direcciones pueden especificarse con letras (N, E, S, W) o números
   - Los flags son opcionales y sirven para categorizar variantes
   - Proporciona métodos para comprobar conexiones específicas
   - Incluye un método factory FromNode para crear un type directo desde un nodo del laberinto
   - En la herencia, puede incluir una transformación usando ':transform'
     * "N/basic from E/basic:90" - hereda de E/basic y rota 90 grados
     
4. MazePattern
   - Clase principal que gestiona la carga y selección de patrones
   - Mantiene un diccionario de List<PatternDefinition> indexado por type
   - Proporciona métodos para cargar patrones desde archivos
   - Métodos principales:
     * GetPattern(MazeNode): Obtiene un patrón aleatorio sin flags
     * GetPattern(MazeNode, string[]): Obtiene un patrón aleatorio con flags
     * FindPattern(type, string[]): Obtiene un patrón aleatorio entre los que coincidan
     * GetPattern(type, string[]): Obtiene un único patrón o lanza excepción si hay más de uno

5. MazePatternLoader
   - Carga patrones desde texto o archivos de texto con un formato específico
   - Formato del archivo:
     @Template=direcciones/flag1/flag2/... [from direcciones/flag1/flag2/...:transform] # comentario
     - La parte 'from' es opcional y permite heredar de otro patrón
     - La parte ':transform' es opcional y permite transformar el patrón heredado
     Ejemplos:
     @Template=N/basic       # Solo conexión Norte con flag "basic"
     @Template=E/basic from N/basic:90    # Este hereda de Norte y rota 90°
     @Template=W/basic from N/basic:FlipH # Oeste hereda de Norte y voltea horizontal
     @Template=NE/fancy      # Conexiones Norte y Este con flag "fancy"
     @Template=NS/stone      # Conexiones Norte y Sur con flag "stone"
     @Template=NESW/basic    # Todas las conexiones con flag "basic"
     <patrón visual en ASCII>
   - Maneja la herencia y transformación de patrones
   - Transformaciones disponibles:
     * 90, 180, -90: Rotaciones en grados
     * FlipH, FlipV: Volteo horizontal o vertical
     * MirrorLR, MirrorRL: Espejo izquierda-derecha o derecha-izquierda
     * MirrorTB, MirrorBT: Espejo arriba-abajo o abajo-arriba
   - La herencia permite reutilizar patrones base y transformarlos
   - Solo se puede heredar entre patrones con el mismo número de conexiones

6. MazeGraphToArray2D
   - Convierte un grafo de laberinto en una representación visual 2D
   - Usa MazePattern para obtener los patrones visuales adecuados para cada nodo
   - Combina los patrones para crear la representación completa del laberinto

Ejemplo de uso:
1. Crear una instancia de MazePattern con un tamaño de celda
   var patterns = new MazePattern(cellSize: 5);

2. Cargar patrones desde archivos
   patterns.LoadPatterns("basic_patterns.txt");
   patterns.LoadPatterns("fancy_patterns.txt");

3. Para cada nodo del laberinto:
   - El sistema identifica automáticamente las conexiones del nodo
   - Obtiene un patrón visual aleatorio que coincida con los flags requeridos
   var pattern = patterns.GetPattern(node, "basic");  // o "fancy" para variantes decorativas
   - Lista los patrones disponibles:
     var allPatterns = patterns.FindPatterns(node);  // Todos los patrones disponibles
     var basicPatterns = patterns.FindPatterns(node, new[] { "basic" });  // Patrones con flag "basic"
     var fancyPatterns = patterns.FindPatterns(node, new[] { "fancy" }, new[] { "stone" });  // Patrones con flag "fancy" y opcionalmente "stone"
   - O obtiene un patrón exacto:
     var pattern = patterns.GetPattern(type, new[] { "basic", "stone" });  // Debe tener exactamente estos flags
     
     Ejemplo de uso:


4. El sistema combina todos los patrones para crear el laberinto visual completo
   var array2D = MazeGraphToArray2D.Convert(graph, patterns);

Ejemplo de archivo de patrones con herencia:

# Patrón base con solo conexión norte
@Template=N/basic          # Norte
####
#  #
#  #
#  #

# Patrón este que hereda del norte
@Template=E/basic from N/basic:90  # Este hereda y rota 90° del patrón norte

Reglas de herencia:
- Solo se puede heredar entre patrones con el mismo número de conexiones
- Los flags del patrón heredado se mantienen en el nuevo patrón
- Ejemplos de herencias válidas:
  * E/basic (Este) puede heredar de N/basic (Norte)
  * ES/basic (Este+Sur) puede heredar de NE/basic (Norte+Este)
  * ESW/basic (Este+Sur+Oeste) puede heredar de NES/basic (Norte+Este+Sur)

Los patrones se definen en archivos de texto donde cada celda puede tener múltiples variantes visuales y pueden heredar y transformar patrones de otras celdas, permitiendo una gran flexibilidad en el diseño visual del laberinto.
